{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nclass SubjectComponent {\n  ngOnInit() {\n    // Subject emits next set of values\n    // Difference between Subject and Observable\n    // let obs =  new Observable((observer)=> {observer.next(Math.random())});\n    //Subscriber 1\n    //obs.subscribe((data) => {console.log(data)});\n    //Subscriber 2\n    // obs.subscribe((data) => {console.log(data)});\n    //const subject = new Subject();\n    //Subscriber 1\n    //  subject.subscribe((data) => {console.log(data)});\n    //Subscriber 2\n    //  subject.subscribe((data) => {console.log(data)});\n    //  subject.next(Math.random());\n    //AJAX call\n    //  const data = ajax('https://randomuser.me/api/')\n    //   data.subscribe((res)=>console.log(res));\n    //   data.subscribe((res)=>console.log(res));\n    //   data.subscribe((res)=>console.log(res));\n    //AJAX call\n    // const subject = new Subject();\n    // const data = ajax('https://randomuser.me/api/')\n    // subject.subscribe((res)=>console.log(res));\n    // subject.subscribe((res)=>console.log(res));\n    // subject.subscribe((res)=>console.log(res));\n    // data.subscribe(subject);\n    // BehaviourSubject : Behavior Subject  emits present and  next set of values\n    // const subject = new BehaviorSubject<number>(100);\n    // //Subscriber 1\n    // subject.subscribe((data) => {console.log(\"Subscriber 1: \" + data)});\n    //   //Subscriber 2\n    // subject.subscribe((data) => {console.log(\"Subscriber 2: \" + data)});\n    // subject.next(2020);\n    // //Subscriber 3\n    // subject.subscribe((data) => {console.log(\"Subscriber 3: \" + data)});\n    // subject.next(2023);\n    //ReplaySubject\n    //const subject = new Subject();\n    //const subject = new BehaviorSubject<number>(100);\n    //Subscriber 1\n    //subject.subscribe((data) => {console.log(\"Subscriber 1: \" + data)});\n    //Subscriber 2\n    // subject.subscribe((data) => {console.log(\"Subscriber 2: \" + data)});\n    // subject.next(2020);\n    //Subscriber 3\n    // subject.subscribe((data) => {console.log(\"Subscriber 3: \" + data)});\n    // subject.next(2023);\n    // ReplaySubject : Replay Subject  emits previous,present and  next set of values.\n    //const subject = new Subject();\n    // const subject = new ReplaySubject<number>(2);\n    // subject.next(100);\n    // subject.next(200);\n    // subject.next(300);\n    // //Subscriber 1\n    // subject.subscribe((data) => {console.log(\"Subscriber 1: \" + data)});\n    //   //Subscriber 2\n    // subject.subscribe((data) => {console.log(\"Subscriber 2: \" + data)});\n    // subject.next(2020);\n    // //Subscriber 3\n    // subject.subscribe((data) => {console.log(\"Subscriber 3: \" + data)});\n    // subject.next(2023);\n    // AsyncSubject\n    // const asyncSubject = new AsyncSubject();\n    // asyncSubject.next(100);\n    // asyncSubject.next(200);\n    // asyncSubject.next(300);\n    // asyncSubject.subscribe((data)=>console.log(`Subscriber 1: ${data}`));\n    // asyncSubject.complete();\n    // asyncSubject.next(400);\n    // asyncSubject.subscribe((data)=>console.log(`Subscriber 2: ${data}`));\n    //Promise vs Observable \n    const promise = new Promise((resolve, reject) => {\n      console.log('Promise is called');\n      resolve(100);\n      resolve(200);\n      resolve(300);\n    });\n    promise.then(data => {\n      console.log(data);\n    });\n    const obs = new Observable(sub => {\n      console.log('Observable is called');\n      sub.next(100);\n      sub.next(200);\n      sub.next(300);\n    });\n    obs.subscribe(() => {\n      console.log(data);\n    });\n  }\n  static #_ = this.ɵfac = function SubjectComponent_Factory(t) {\n    return new (t || SubjectComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SubjectComponent,\n    selectors: [[\"app-subject\"]],\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"container\"]],\n    template: function SubjectComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Subjects in RXJS\");\n        i0.ɵɵelementEnd()();\n      }\n    },\n    styles: [\".container[_ngcontent-%COMP%]{\\n    margin: 50px 100px;\\n    padding: 10px 20px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc3ViamVjdC9zdWJqZWN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxrQkFBa0I7SUFDbEIsa0JBQWtCO0FBQ3RCIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lcntcclxuICAgIG1hcmdpbjogNTBweCAxMDBweDtcclxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}\nexport { SubjectComponent };","map":{"version":3,"names":["Observable","SubjectComponent","ngOnInit","promise","Promise","resolve","reject","console","log","then","data","obs","sub","next","subscribe","_","_2","selectors","decls","vars","consts","template","SubjectComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["D:\\Angular Course syllabus by Vinay\\angular-16-complete-course-main\\09-angular-rxjs-and-observables\\start\\src\\app\\subject\\subject.component.ts","D:\\Angular Course syllabus by Vinay\\angular-16-complete-course-main\\09-angular-rxjs-and-observables\\start\\src\\app\\subject\\subject.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AsyncSubject, BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\n\n@Component({\n  selector: 'app-subject',\n  templateUrl: './subject.component.html',\n  styleUrls: ['./subject.component.css']\n})\nexport class SubjectComponent implements OnInit{\n\n  ngOnInit(){\n    // Subject emits next set of values\n    \n    // Difference between Subject and Observable\n     // let obs =  new Observable((observer)=> {observer.next(Math.random())});\n\n     //Subscriber 1\n     //obs.subscribe((data) => {console.log(data)});\n\n     //Subscriber 2\n    // obs.subscribe((data) => {console.log(data)});\n\n     //const subject = new Subject();\n\n      //Subscriber 1\n    //  subject.subscribe((data) => {console.log(data)});\n\n      //Subscriber 2\n    //  subject.subscribe((data) => {console.log(data)});\n\n    //  subject.next(Math.random());\n\n    //AJAX call\n  //  const data = ajax('https://randomuser.me/api/')\n\n  //   data.subscribe((res)=>console.log(res));\n  //   data.subscribe((res)=>console.log(res));\n  //   data.subscribe((res)=>console.log(res));\n\n    //AJAX call\n    // const subject = new Subject();\n    // const data = ajax('https://randomuser.me/api/')\n\n    // subject.subscribe((res)=>console.log(res));\n    // subject.subscribe((res)=>console.log(res));\n    // subject.subscribe((res)=>console.log(res));\n    \n    // data.subscribe(subject);\n\n    // BehaviourSubject : Behavior Subject  emits present and  next set of values\n\n    // const subject = new BehaviorSubject<number>(100);\n\n    // //Subscriber 1\n    // subject.subscribe((data) => {console.log(\"Subscriber 1: \" + data)});\n\n    //   //Subscriber 2\n    // subject.subscribe((data) => {console.log(\"Subscriber 2: \" + data)});\n\n    // subject.next(2020);\n\n    // //Subscriber 3\n    // subject.subscribe((data) => {console.log(\"Subscriber 3: \" + data)});\n\n    // subject.next(2023);\n\n    //ReplaySubject\n\n    //const subject = new Subject();\n    //const subject = new BehaviorSubject<number>(100);\n\n    //Subscriber 1\n    //subject.subscribe((data) => {console.log(\"Subscriber 1: \" + data)});\n\n      //Subscriber 2\n   // subject.subscribe((data) => {console.log(\"Subscriber 2: \" + data)});\n\n   // subject.next(2020);\n\n    //Subscriber 3\n   // subject.subscribe((data) => {console.log(\"Subscriber 3: \" + data)});\n\n   // subject.next(2023);\n\n\n    // ReplaySubject : Replay Subject  emits previous,present and  next set of values.\n\n    //const subject = new Subject();\n    // const subject = new ReplaySubject<number>(2);\n\n    // subject.next(100);\n    // subject.next(200);\n    // subject.next(300);\n    \n\n    // //Subscriber 1\n    // subject.subscribe((data) => {console.log(\"Subscriber 1: \" + data)});\n\n    //   //Subscriber 2\n    // subject.subscribe((data) => {console.log(\"Subscriber 2: \" + data)});\n\n    // subject.next(2020);\n\n    // //Subscriber 3\n    // subject.subscribe((data) => {console.log(\"Subscriber 3: \" + data)});\n\n    // subject.next(2023);\n\n    // AsyncSubject\n\n    // const asyncSubject = new AsyncSubject();\n\n    // asyncSubject.next(100);\n    // asyncSubject.next(200);\n    // asyncSubject.next(300);\n\n    // asyncSubject.subscribe((data)=>console.log(`Subscriber 1: ${data}`));\n\n    // asyncSubject.complete();\n    // asyncSubject.next(400);\n    \n\n    // asyncSubject.subscribe((data)=>console.log(`Subscriber 2: ${data}`));\n\n    //Promise vs Observable \n\n    const promise = new Promise((resolve,reject)=>{\n      console.log('Promise is called');\n      resolve(100);\n      resolve(200);\n      resolve(300);\n    });\n\n    promise.then((data)=>{\n      console.log(data);      \n    })\n\n    const obs = new Observable((sub)=>{\n      console.log('Observable is called');\n      sub.next(100);\n      sub.next(200);\n      sub.next(300);\n    });\n\n    obs.subscribe(()=>{\n      console.log(data);\n      \n    });\n    \n  }\n\n}\n","<div class=\"container\">\n    <h2>Subjects in RXJS</h2>\n</div>\n"],"mappings":"AACA,SAAwCA,UAAU,QAAgC,MAAM;;AAGxF,MAKaC,gBAAgB;EAE3BC,QAAQA,CAAA;IACN;IAEA;IACC;IAEA;IACA;IAEA;IACD;IAEC;IAEC;IACF;IAEE;IACF;IAEA;IAEA;IACF;IAEA;IACA;IACA;IAEE;IACA;IACA;IAEA;IACA;IACA;IAEA;IAEA;IAEA;IAEA;IACA;IAEA;IACA;IAEA;IAEA;IACA;IAEA;IAEA;IAEA;IACA;IAEA;IACA;IAEE;IACH;IAEA;IAEC;IACD;IAEA;IAGC;IAEA;IACA;IAEA;IACA;IACA;IAGA;IACA;IAEA;IACA;IAEA;IAEA;IACA;IAEA;IAEA;IAEA;IAEA;IACA;IACA;IAEA;IAEA;IACA;IAGA;IAEA;IAEA,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAACC,MAAM,KAAG;MAC5CC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChCH,OAAO,CAAC,GAAG,CAAC;MACZA,OAAO,CAAC,GAAG,CAAC;MACZA,OAAO,CAAC,GAAG,CAAC;IACd,CAAC,CAAC;IAEFF,OAAO,CAACM,IAAI,CAAEC,IAAI,IAAG;MACnBH,OAAO,CAACC,GAAG,CAACE,IAAI,CAAC;IACnB,CAAC,CAAC;IAEF,MAAMC,GAAG,GAAG,IAAIX,UAAU,CAAEY,GAAG,IAAG;MAChCL,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnCI,GAAG,CAACC,IAAI,CAAC,GAAG,CAAC;MACbD,GAAG,CAACC,IAAI,CAAC,GAAG,CAAC;MACbD,GAAG,CAACC,IAAI,CAAC,GAAG,CAAC;IACf,CAAC,CAAC;IAEFF,GAAG,CAACG,SAAS,CAAC,MAAI;MAChBP,OAAO,CAACC,GAAG,CAACE,IAAI,CAAC;IAEnB,CAAC,CAAC;EAEJ;EAAC,QAAAK,CAAA,G;qBA7IUd,gBAAgB;EAAA;EAAA,QAAAe,EAAA,G;UAAhBf,gBAAgB;IAAAgB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,0BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCT7BE,EAAA,CAAAC,cAAA,aAAuB;QACfD,EAAA,CAAAE,MAAA,uBAAgB;QAAAF,EAAA,CAAAG,YAAA,EAAK;;;;;;SDQhB3B,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}